<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2004 The Apache Software Foundation
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project default="java:jar" xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:ant="jelly:ant">

    <goal name="_findProjectFile">
        <j:set var="_projectFileFound" value="false" />
        <j:set var="_projectFile" value="" />
        <j:set var="myPom" value="${pom}" />
        <j:while test="${myPom!=null}">
            <j:set var="pomDir" value="${myPom.file.parent}" />
            <j:new var="file" className="java.io.File">
                <j:arg value="${pomDir}/${_findProjectFile}" />
            </j:new>
            <j:if test="${file.exists()}">
                <j:set var="_projectFile" value="${file}" />
                <j:set var="_projectFileFound" value="true" />
                <j:break />
            </j:if>
            <j:set var="myPom" value="${myPom.parent}" />
        </j:while>
    </goal>

    <goal name="set.checkstyle.properties">

        <j:set var="_findProjectFile" value="${org.apache.jetspeed.checkstyle.header.file}" />
        <attainGoal name="_findProjectFile" />
        <j:if test="${!_projectFileFound}">
            <fail
                message="org.apache.jetspeed.checkstyle.header.file ${org.apache.jetspeed.checkstyle.header.file} not found in the project tree" />
        </j:if>
        <j:set var="maven.checkstyle.header.file" value="${_projectFile.absolutePath}" />
        <echo message="using maven.checkstyle.header.file ${maven.checkstyle.header.file}" />

        <j:set var="_findProjectFile" value="${org.apache.jetspeed.checkstyle.properties}" />
        <attainGoal name="_findProjectFile" />
        <j:if test="${!_projectFileFound}">
            <fail
                message="org.apache.jetspeed.checkstyle.properties ${org.apache.jetspeed.checkstyle.properties} not found in the project tree" />
        </j:if>
        <j:set var="maven.checkstyle.properties" value="${_projectFile.absolutePath}" />
        <echo message="using maven.checkstyle.properties ${maven.checkstyle.properties}" />
    </goal>

    <goal name="set.license.properties">

        <j:set var="_findProjectFile" value="${org.apache.jetspeed.license.licenseFile}" />
        <attainGoal name="_findProjectFile" />
        <j:if test="${!_projectFileFound}">
            <fail
                message="org.apache.jetspeed.license.licenseFile ${org.apache.jetspeed.license.licenseFile} not found in the project tree" />
        </j:if>
        <j:set var="maven.license.licenseFile" value="${_projectFile.absolutePath}" />
        <echo message="using maven.license.licenseFile ${maven.license.licenseFile}" />

    </goal>

    <preGoal name="checkstyle:init">
        <attainGoal name="set.checkstyle.properties" />
        <attainGoal name="set.license.properties" />
    </preGoal>

    <goal name="allClean" description="Clean the master project and all subprojects">
        <attainGoal name="subClean" />
        <attainGoal name="clean" />
    </goal>

    <goal name="allTest" description="Test all components">
        <j:set var="maven.test.skip" value="false" scope="parent" />
        <maven:reactor basedir="${basedir}" includes="components/*/project.xml"
            excludes="applications/project.xml" goals="test" banner="Testing..." ignoreFailures="false" />
    </goal>

    <goal name="subClean" description="Clean all subprojects">

        <maven:reactor basedir="${basedir}"
            includes="*/project.xml,applications/*/project.xml,services/*/project.xml,components/*/project.xml"
            excludes="applications/project.xml,taglibs/project.xml,portals-bridges/project.xml" goals="clean"
            banner="Cleaning" ignoreFailures="true" />
        <maven:reactor basedir="${basedir}"
            includes="layout-portlets/project.xml,maven-plugin/project.xml,taglibs/project.xml" goals="clean"
            banner="Cleaning" ignoreFailures="true" />
    </goal>

    <goal name="allSite"
          description="Build the site for the master project and all subprojects">

      <!-- Modified version of multiproject:site goal not using the reactor to run the site goal for each subproject
           but exec it in a separate process.
           This way one doesn't need to allocated 900M+ JVM memory to get this working!
      -->
      <maven:reactor
        basedir="${basedir}"
        banner="Gathering project list"
        includes="${maven.multiproject.includes}"
        excludes="${maven.multiproject.excludes}"
        postProcessing="true"
        collectOnly="true"
        collectionVar="multiprojects"
        ignoreFailures="${maven.multiproject.ignoreFailures}"
      />
      
      <j:set var="online" value="${maven.mode.online}"/>
      <j:choose>
        <j:when test="${online}">
          <j:set var="cmdargs" value="${maven.multiproject.site.goals}"/>
        </j:when>
        <j:otherwise>
          <j:set var="cmdargs" value="-o ${maven.multiproject.site.goals}"/>
        </j:otherwise>
      </j:choose>
        
      <j:forEach var="reactorProject" items="${multiprojects}">

        <!-- I don't know yet if this will work on Linux too ... -->
        <exec dir="${reactorProject.context.getVariable('basedir')}" vmlauncher="false" failonerror="true" executable="maven">
          <arg line="${cmdargs}"/>
        </exec>
      </j:forEach>        
      <echo>Now building reactor projects: ${multiprojects}</echo>
    
      <!-- copy each project over into ${maven.docs.dest} -->
      
      <j:forEach var="reactorProject" items="${multiprojects}">
        <j:set var="directory" value="${maven.docs.dest}/${maven.multiproject.aggregateDir}${reactorProject.artifactId}"/>
        <mkdir dir="${directory}"/>
        <j:set var="fromDir" value="${reactorProject.context.getVariable('maven.docs.dest')}"/>
        <mkdir dir="${fromDir}"/>
        <copy toDir="${directory}">
          <fileset dir="${fromDir}"/>
        </copy>
      	<copy toDir="${directory}/style">
      	  <fileset dir="${basedir}/xdocs/style"/>
      	</copy>
      	<copy toDir="${directory}/images">
      	  <fileset file="${basedir}/xdocs/images/breadcrumbs.jpg"/>
      	</copy>
      </j:forEach>

      <attainGoal name="multiproject:create-nav"/>
      <attainGoal name="multiproject:create-overview-page"/>
      <attainGoal name="site" />
      <attainGoal name="pdf" />            
            
    </goal>
    
    <goal name="jetspeed2:jar:install">
        <maven:reactor basedir="${basedir}" includes="${jar.includes}" excludes="${jar.excludes}" goals="jar:install"
            banner="Build and Install all Jetspeed 2 jars" postProcessing="false" ignoreFailures="false" />
    </goal>

    <goal name="jetspeed2:war:install">
        <maven:reactor basedir="${basedir}"
            includes="applications/**/project.xml,layout-portlets/project.xml"
            excludes="applications/project.xml" goals="war:install" banner="Build and Install all Jetspeed 2 wars"
            postProcessing="false" ignoreFailures="false" />
    </goal>
    
    <goal name="jetspeed2:schema">
        <maven:reactor basedir="${basedir}"
            includes="components/security-schema/project.xml" goals="directory:schema" banner="Generate Jetspeed 2 schema"
            postProcessing="false" ignoreFailures="false" />
    </goal>

    <goal name="initMavenPlugin">
    	<!-- build jetspeed 2 plugin core -->
		<maven:reactor basedir="${basedir}/maven-plugin" includes="project.xml" goals="deploy-plugin"
            banner="Build and deploy the Jetspeed 2 Maven plugin" postProcessing="false" ignoreFailures="false" />
    </goal>
    
    <goal name="allBuild" description="Build all jars and war">
            
      <attainGoal name="j2:portal.conf.sql"/>
      <attainGoal name="j2:portal.conf.ldap"/>
      <attainGoal name="j2:portal.conf.ojb"/>

      <attainGoal name="j2:portal.conf.jetspeed"/>
      <attainGoal name="j2:portal.conf.tomcat"/>

      <j:if test="${context.getVariable('maven.test.skip') != 'true'}">
        <j:set var="online" value="${maven.mode.online}"/>
        <j:choose>
          <j:when test="${online}">
            <j:set var="cmdargs" value="j2:db.create.test"/>
          </j:when>
          <j:otherwise>
            <j:set var="cmdargs" value="-o j2:db.create.test"/>
          </j:otherwise>
        </j:choose>
        <exec dir="${basedir}" vmlauncher="true" failonerror="true" executable="maven">
          <arg line="${cmdargs}"/>
        </exec>
      </j:if>

	  <attainGoal name="jetspeed2:schema" />
	  
      <!-- Build jars files-->
      <attainGoal name="jetspeed2:jar:install" />

      <!-- disabling testing as we're past that -->

      <j:set var="maven.test.skip" value="true"/>
        
      <!-- Build and install pa war files -->
      <attainGoal name="jetspeed2:war:install" />
        
      <!-- Build and install portal war file -->
      <attainGoal name="war:install"/>        
        <!-- build jetspeed 2 plugin with webapp -->
        <maven:reactor basedir="${basedir}/maven-plugin" includes="project.xml" goals="deploy-plugin"
            banner="Build and deploy the Jetspeed 2 Maven plugin" postProcessing="false" ignoreFailures="false" />
    </goal>

    <goal name="show.maven.props">
        <echo message="maven.home.local = ${maven.home.local}" />
        <echo message="maven.repo.local = ${maven.repo.local}" />
    </goal>

	<!-- ================================================ -->
	<!-- ============== UNIT TESTS SUPPORT ============== -->
	<!-- ================================================ -->
    <!-- This will be inherited into all sub-projects to assists in
         setting jdbc test connecitons -->
    <!-- ================================================ -->
    
    <preGoal name="test:test">
        <attainGoal name="dbSetup" />
    </preGoal>

    <preGoal name="test:single">
        <attainGoal name="dbSetup" />
    </preGoal>

    <goal name="dbSetup">
        <j:set var="maven.junit.sysproperties"
            value="${maven.junit.sysproperties} org.apache.jetspeed.database.url org.apache.jetspeed.database.driver org.apache.jetspeed.database.user org.apache.jetspeed.database.password p6.home" />
        <j:set var="org.apache.jetspeed.database.url" value="${org.apache.jetspeed.test.database.url}" />
        <j:set var="org.apache.jetspeed.database.driver" value="${org.apache.jetspeed.test.database.driver}" />
        <j:set var="org.apache.jetspeed.database.user" value="${org.apache.jetspeed.test.database.user}" />
        <j:set var="org.apache.jetspeed.database.password" value="${org.apache.jetspeed.test.database.password}" />

        <path id="jdbc.drivers.path" path="${org.apache.jetspeed.test.jdbc.drivers.path}" />
        <maven:addPath id="maven.dependency.classpath" refid="jdbc.drivers.path" />
    </goal>
    
    <goal name='import'>
        <filterset id="dbSet" begintoken="$" endtoken="}">
          <filter token="{org.apache.jetspeed.database.driver" value="${org.apache.jetspeed.production.database.driver}"/>
          <filter token="{org.apache.jetspeed.database.url" value="${org.apache.jetspeed.production.database.url}"/>      
          <filter token="{org.apache.jetspeed.database.user" value="${org.apache.jetspeed.production.database.user}"/>            
          <filter token="{org.apache.jetspeed.database.password" value="${org.apache.jetspeed.production.database.password}"/>            
        </filterset>            
        <copy file="./etc/import/assembly/repository-datasource-spring.xml"
              tofile="${maven.build.dir}/classes/repository-datasource-spring.xml"
              overwrite="true"
              failonerror="true">
          <filterset refid="dbSet"/>
        </copy>        
        <copy todir='${maven.build.dir}/classes'
          file="./etc/log4j/log4j.properties"/>
        <copy todir='${maven.build.dir}/classes'>
          <fileset dir="./etc/db-ojb/"/>
        </copy>              
        <copy todir="${maven.build.dir}/classes"
              file="./etc/import/assembly/import-page-manager.xml"/>
        <copy todir="${maven.build.dir}/classes"
              file="./src/webapp/WEB-INF/assembly/transaction.xml"/>
        <java classname="org.apache.jetspeed.page.PageImporter" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
            <pathelement path="${org.apache.jetspeed.production.jdbc.drivers.path}"/>            
          </classpath>
		<sysproperty key="org.apache.jetspeed.page.import.configuration" 
                     value="./etc/import/import.properties"/>		
        </java>
    </goal>
    
    <goal name='pages'>
	<copy todir="${org.apache.jetspeed.deploy.war.dir}/jetspeed/WEB-INF/pages/">
        <fileset dir="./src/webapp/WEB-INF/pages/"/>        
  	</copy>        
        
    </goal>
</project>
