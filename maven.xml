<!--
Copyright 2004 The Apache Software Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project default="java:jar"
         xmlns:j="jelly:core"
         xmlns:maven="jelly:maven"
         xmlns:ant="jelly:ant">


  <goal name="allClean"
        description="Clean the master project and all subprojects">
    <attainGoal name="subClean"/>
    <attainGoal name="clean"/>
  </goal>

  <goal name="subClean"
        description="Clean all subprojects"
        >
    <maven:reactor
               basedir="${basedir}"
               includes="*/project.xml,applications/*/project.xml,services/*/project.xml,components/*/project.xml,struts-portlet/*/project.xml"
               excludes="applications/project.xml,cornerstone-demo/project.xml"
               goals="clean"
               banner="Cleaning"
               ignoreFailures="true"/>
  </goal>

  <goal name="allSite"
        description="Build the site for the master project and all subprojects"
        >
    <maven:reactor
               basedir="${basedir}"
               includes="site/project.xml"
               excludes="cornerstone-demo/project.xml,portlet-api/project.xml"
               goals="allSite"
               banner="Building Site"
               postProcessing="false"
               ignoreFailures="false"/>
  </goal>

  <goal name="allBuild"
        description="Build all jars and war">
  	<attainGoal name="db.scripts.gen"/>
  	<attainGoal name="db.create.test"/>

    <!-- Build jars -->
    <maven:reactor
               basedir="${basedir}/jetspeed-api"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the portlet commons services jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/portlet-api"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Portlet API jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/struts-portlet"
               includes="project.xml"
               goals="install"
               banner="Build and Install the common jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/commons"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the common jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/cm"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Component Manager jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}"
               includes="components/file-cache/project.xml,components/id-generator/project.xml,components/locator/project.xml"
               goals="jar:install"
               banner="Build and Install the Misc. Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/jetspeed"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Jetspeed Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/content-server"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the content server jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/rdbms"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the RDBMS jar"
               postProcessing="false"
               ignoreFailures="false"/>
   <maven:reactor
               basedir="${basedir}/components/persistence"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Persistence jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/registry"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Regsitry Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/prefs"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Preferences Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/security"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Security Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    
    <maven:reactor
               basedir="${basedir}/cps"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the portlet commons services jar"
               postProcessing="false"
               ignoreFailures="false"/>

     <!-- Build war files -->
     <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="war:install"
               banner="Build and Install the Portlet WAR"
               postProcessing="false"
               ignoreFailures="false"/>

     <maven:reactor
               basedir="${basedir}/applications/demo"
               includes="project.xml"
               excludes="applications/project.xml"
               goals="war:install"
               banner="Build and Install the Demo application WAR"
               postProcessing="false"
               ignoreFailures="false"/>

     <maven:reactor
               basedir="${basedir}/struts-portlet/demo"
               includes="project.xml"
               goals="war:install"
               banner="Build and Install the Demo application WAR"
               postProcessing="false"
               ignoreFailures="false"/>
     
     <maven:reactor
               basedir="${basedir}/applications/security"
               includes="project.xml"
               goals="war:install"
               banner="Build and Install the Security application WAR"
               postProcessing="false"
               ignoreFailures="false"/>

          <attainGoal name="copy.shared.deps" />
  </goal>

  <goal name="copy.shared.deps">
      <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="catalina:base-shared"
               banner="Deploys misc. jars shared/lib  to Tomcat"
               postProcessing="false"
               ignoreFailures="false"/>

     <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="catalina:shared"
               banner="Deploys container jars to shared/lib to Tomcat"
               postProcessing="false"
               ignoreFailures="false"/>
  </goal>


  <goal name="show.maven.props">
  	<echo message="maven.home.local = ${maven.home.local}" />
  	<echo message="maven.repo.local = ${maven.repo.local}" />
  </goal>

  <goal name="start.production.server">
  	<echo message="====================================" />
  	<echo message="  Production/Deployment Database    " />
  	<echo message="====================================" />
         <java classname="org.hsqldb.Server" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
          </classpath>
            <arg value="-database" />
            <arg value="./src/database/hsql/Production" />
            <arg value="-port" />
            <arg value="9001" />
            <arg value="-silent" />
            <arg value="true" />
            <arg value="-trace" />
            <arg value="false" />
        </java>
  </goal>

  <goal name="start.test.server">
  	<echo message="====================================" />
  	<echo message="        Testing Database            " />
  	<echo message="====================================" />
         <java classname="org.hsqldb.Server" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
          </classpath>
            <arg value="-database" />
            <arg value="./src/database/hsql/Test" />
            <arg value="-port" />
            <arg value="9001" />
            <arg value="-silent" />
            <arg value="true" />
            <arg value="-trace" />
            <arg value="false" />
        </java>
  </goal>

  <goal name="db.scripts.gen" prereqs="torque:init"
        description="Build SQL scripts using Torque generator">

    <echo message="Generating SQL schema creation scripts for HSQLDB"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/hsql"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/hsql/sqldb.map"
      targetDatabase="hypersonic"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>

    <echo message="Generating SQL schema creation scripts for MySQL"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/mysql"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/mysql/sqldb.map"
      targetDatabase="mysql"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>

    <echo message="Generating SQL schema creation scripts for Oracle"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/oracle"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/oracle/sqldb.map"
      targetDatabase="oracle"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>

  </goal>

  <goal name="db.test.properties">
    <j:set var="org.apache.jetspeed.database.default.name" value="${org.apache.jetspeed.test.database.default.name}"/>
    <j:set var="org.apache.jetspeed.database.url" value="${org.apache.jetspeed.test.database.url}"/>
    <j:set var="org.apache.jetspeed.database.driver" value="${org.apache.jetspeed.test.database.driver}"/>
    <j:set var="org.apache.jetspeed.database.user" value="${org.apache.jetspeed.test.database.user}"/>
    <j:set var="org.apache.jetspeed.database.password" value="${org.apache.jetspeed.test.database.password}"/>
    <j:set var="org.apache.jetspeed.jdbc.drivers.path" value="${org.apache.jetspeed.test.jdbc.drivers.path}"/>
  </goal>

  <goal name="db.production.properties">
    <j:set var="org.apache.jetspeed.database.default.name" value="${org.apache.jetspeed.production.database.default.name}"/>
    <j:set var="org.apache.jetspeed.database.url" value="${org.apache.jetspeed.production.database.url}"/>
    <j:set var="org.apache.jetspeed.database.driver" value="${org.apache.jetspeed.production.database.driver}"/>
    <j:set var="org.apache.jetspeed.database.user" value="${org.apache.jetspeed.production.database.user}"/>
    <j:set var="org.apache.jetspeed.database.password" value="${org.apache.jetspeed.production.database.password}"/>
    <j:set var="org.apache.jetspeed.jdbc.drivers.path" value="${org.apache.jetspeed.production.jdbc.drivers.path}"/>
  </goal>

  <!-- ================================================================ -->
  <!-- EXECUTE a DB SCRIPT                                              -->
  <!-- TODO: I'd like to implement this as a plugin or use commons SQL  -->
  <!-- ================================================================ -->
  <goal name="db.execute">
    <sql driver="${org.apache.jetspeed.database.driver}"
         url="${org.apache.jetspeed.database.url}"
         userid="${org.apache.jetspeed.database.user}"
         password="${org.apache.jetspeed.database.password}"
         src="${database.arg.script}">
      <classpath>
        <path refid="maven.dependency.classpath"/>
        <pathelement path="${org.apache.jetspeed.jdbc.drivers.path}"/>
      </classpath>
    </sql>
  </goal>

  <!-- ================================================================ -->
  <!-- EXECUTE CREATE DB SQL SCRIPTS                                    -->
  <!-- TODO: I'd like to implement this as a plugin or use commons SQL  -->
  <!-- ================================================================ -->
  <goal name="db.create.test">
    <attainGoal name="db.test.properties"/>
    <attainGoal name="db.create"/>
  </goal>

  <goal name="db.create.production">
    <attainGoal name="db.production.properties"/>
    <attainGoal name="db.create"/>
  </goal>

  <goal name="db.create">
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase3ojb-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase1-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase2-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/registry-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/prefs-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/security-schema.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./src/sql/populate-db-default.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/test-persistence-schema.sql" />
    <attainGoal name="db.execute" />
  </goal>

  <!-- ================================================================ -->
  <!-- EXECUTE DROP DB SQL SCRIPTS                                      -->
  <!-- TODO: I'd like to implement this as a plugin or use commons SQL  -->
  <!-- ================================================================ -->
  <goal name="db.drop.test">
    <attainGoal name="db.test.properties"/>
    <attainGoal name="db.drop"/>
  </goal>

  <goal name="db.drop.production">
    <attainGoal name="db.production.properties"/>
    <attainGoal name="db.drop"/>
  </goal>

  <goal name="db.drop">
    <j:set var="database.arg.script" value="./src/sql/${org.apache.jetspeed.database.default.name}/drop-db.sql" />
    <attainGoal name="db.execute" />
    <j:set var="database.arg.script" value="./src/sql/${org.apache.jetspeed.database.default.name}/registry-drop-db.sql" />
    <attainGoal name="db.execute" />
  </goal>

  <!-- ================================================================ -->
  <!-- EXECUTE RECREATE DB SQL SCRIPTS                                  -->
  <!-- TODO: I'd like to implement this as a plugin or use commons SQL  -->
  <!-- ================================================================ -->
  <goal name="db.recreate">
    <attainGoal name="db.create.production" />
  </goal>

    <goal name="quickStart"
        description="Creates the production DB and calls portal/maven fulDeploy">
        <attainGoal name="db.recreate" />
        <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="remove.wars"
               banner="Remove war files, make sure to shutdown server first"
               postProcessing="false"
               ignoreFailures="false"/>        
        <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="fullDeploy"
               banner="Deploying basic Jetspeed portal suite"
               postProcessing="false"
               ignoreFailures="false"/>
    </goal>

   <goal name="dropdrops">
    <attainGoal name="java:compile"/>
    <attainGoal name="db.test.properties"/>
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/cornerstonedemo-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase1-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase2-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/phase3ojb-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/prefs-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/registry-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/security-schema.sql" />
    <attainGoal name="run.dropdrops" />
    <j:set var="dropstable" value="./target/src/sql/${org.apache.jetspeed.database.default.name}/test-persistence-schema.sql" />
    <attainGoal name="run.dropdrops" />
   </goal>

    <goal name="run.dropdrops">
         <java classname="org.apache.jetspeed.dbutil.ScriptUtil" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
          </classpath>
            <arg value="-drops" />
            <arg value="${dropstable}" />
        </java>
    </goal>
</project>
