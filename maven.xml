<project default="java:jar"
         xmlns:j="jelly:core"
         xmlns:maven="jelly:maven"
         xmlns:ant="jelly:ant">
         
           
  <goal name="allClean"
        description="Clean the master project and all subprojects">
    <attainGoal name="subClean"/>
    <attainGoal name="clean"/>
  </goal>

  <goal name="subClean"
        description="Clean all subprojects"
        >
    <maven:reactor
               basedir="${basedir}"
               includes="*/project.xml,applications/*/project.xml,services/*/project.xml,components/*/project.xml"
               excludes="applications/project.xml,cornerstone-demo/project.xml"
               goals="clean"
               banner="Cleaning"
               ignoreFailures="true"/>
  </goal>

  <goal name="allSite"
        description="Build the site for the master project and all subprojects"
        >
    <maven:reactor
               basedir="${basedir}"
               includes="site/project.xml"
               goals="allSite"
               banner="Building Site"
               postProcessing="false"
               ignoreFailures="false"/>
  </goal>

  <goal name="allBuild"
        description="Build all jars and war">
    <!-- Build jars -->
    <maven:reactor
               basedir="${basedir}/portlet-api"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Portlet API jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/commons"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the common jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/cm"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Component Manager jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/rdbms"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the RDBMS jar"
               postProcessing="false"
               ignoreFailures="false"/>
   <maven:reactor
               basedir="${basedir}/components/persistence"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Persistence jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/components/registry"
               includes="project.xml"
               goals="build.registry"
               banner="Build and Install the Regsitry Components jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/cps"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the portlet commons services jar"
               postProcessing="false"
               ignoreFailures="false"/>
    <maven:reactor
               basedir="${basedir}/plugin"
               includes="project.xml"
               goals="jar:install"
               banner="Build and Install the Plugin jar"
               postProcessing="false"
               ignoreFailures="false"/>        

    <maven:reactor
               basedir="${basedir}"
               includes="services/security/project.xml"
               goals="db.recreate,jar:install,ojb.registry"
               banner="Build and Install the services - security jar"
               postProcessing="false"
               ignoreFailures="false"/>

     <!-- Build war files -->
     <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="war:install"
               banner="Build and Install the Portlet WAR"
               postProcessing="false"
               ignoreFailures="false"/>
        

     <maven:reactor
               basedir="${basedir}/applications/demo"
               includes="project.xml"
               excludes="applications/project.xml"
               goals="war:install"
               banner="Build and Install the Demo application WAR"
               postProcessing="false"
               ignoreFailures="false"/>

     <maven:reactor
               basedir="${basedir}/applications/pam"
               includes="project.xml"
               excludes="applications/project.xml"
               goals="war:install"
               banner="Build and Install the PAM application WAR"
               postProcessing="false"
               ignoreFailures="false"/>
               
          <attainGoal name="copy.shared.deps" />
  </goal>
  
  <goal name="copy.shared.deps"> 
      <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="catalina:base-shared"
               banner="Deploys misc. jars shared/lib  to Tomcat"
               postProcessing="false"
               ignoreFailures="false"/>

     <maven:reactor
               basedir="${basedir}"
               includes="portal/project.xml"
               goals="catalina:shared"
               banner="Deploys container jars to shared/lib to Tomcat"
               postProcessing="false"
               ignoreFailures="false"/>  
  </goal>

 
  <goal name="show.maven.props">
  	<echo message="maven.home.local = ${maven.home.local}" />
  	<echo message="maven.repo.local = ${maven.repo.local}" />
  </goal>

  <goal name="start.production.server">
  	<echo message="====================================" />
  	<echo message="  Production/Deployment Database    " />  	
  	<echo message="====================================" />
         <java classname="org.hsqldb.Server" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
          </classpath>
            <arg value="-database" />          
            <arg value="./src/database/hsql/Production" />
            <arg value="-port" />          
            <arg value="9001" />
            <arg value="-silent" />          
            <arg value="true" />
            <arg value="-trace" />          
            <arg value="false" />
        </java>  
  </goal>
  
  <goal name="start.test.server">
  	<echo message="====================================" />
  	<echo message="        Testing Database            " />  	
  	<echo message="====================================" />
         <java classname="org.hsqldb.Server" fork="yes">
          <classpath>
            <path refid="maven.dependency.classpath"/>
            <pathelement path="${maven.build.dest}"/>
          </classpath>
            <arg value="-database" />          
            <arg value="./src/database/hsql/Test" />
            <arg value="-port" />          
            <arg value="9001" />
            <arg value="-silent" />          
            <arg value="true" />
            <arg value="-trace" />          
            <arg value="false" />
        </java>  
  </goal>
  
   <goal name="installProductionDb">
  	<echo message="${basedir}" />
  	 <maven:reactor
               basedir="${basedir}"
               includes="components/registry/project.xml,services/security/project.xml,portal/project.xml"
               goals="db.recreate"
               banner="Create production database"
               postProcessing="false"
               ignoreFailures="false"/>
  </goal>
    
  <goal name="db.scripts.gen" prereqs="torque:init"
        description="Build SQL scripts using Torque generator">

    <echo message="Generating SQL schema creation scripts for HSQLDB"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/hsql"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/hsql/sqldb.map"
      targetDatabase="hypersonic"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>

    <echo message="Generating SQL schema creation scripts for MySQL"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/mysql"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/mysql/sqldb.map"
      targetDatabase="mysql"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>

    <echo message="Generating SQL schema creation scripts for Oracle"/>
    <torque-sql
      basePathToDbProps="sql/base/"
      contextProperties="${torque.contextProperties}"
      controlTemplate="${torque.template.sql}"
      idTableXMLFile="${torque.idTableXMLFile}"
      outputDirectory="${maven.build.src}/sql/oracle"
      outputFile="report.${torque.project}.sql.generation"
      sqldbmap="${maven.build.src}/sql/oracle/sqldb.map"
      targetDatabase="oracle"
      useClasspath="true">
      <fileset dir="${torque.schema.dir}"
        includes="${torque.schema.sql.includes}"
        excludes="${torque.schema.sql.excludes}"
      />
    </torque-sql>
                 
  </goal>

</project>
