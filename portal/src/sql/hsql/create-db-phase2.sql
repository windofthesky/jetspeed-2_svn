----------------------------------------------------------------------------
-- Page Definitions
----------------------------------------------------------------------------
CREATE TABLE PAGE
(
    PAGE_ID INTEGER NOT NULL PRIMARY KEY,
    ID VARCHAR(80),
    TITLE VARCHAR(100),
    DEFAULT_SKIN VARCHAR(100),
    DEFAULT_DECORATOR VARCHAR(100),
    DEFAULT_PORTLET_DECORATOR VARCHAR(100),
    ACL VARCHAR(80),
    UNIQUE(ID)
);

----------------------------------------------------------------------------
-- Fragments (portlets, layouts)
----------------------------------------------------------------------------
CREATE TABLE FRAGMENT
( 
    FRAGMENT_ID INTEGER NOT NULL PRIMARY KEY,
    ID VARCHAR(80),
    COMPONENT_NAME(80),
    ACL VARCHAR(80),
    TITLE VARCHAR(100),
    TYPE VARCHAR(40),
    SKIN VARCHAR(80),
    DECORATOR VARCHAR(80),
    STATE VARCHAR(40),
    UNIQUE(ID)
);
                                
-- associates a page with its top level fragments
CREATE TABLE PAGE_FRAGMENTS
(
    PAGE_ID INTEGER NOT NULL,
    FRAGMENT_ID INTEGER NOT NULL,    
);

CREATE INDEX IX_PAGE_FRAGMENTS_1 ON PAGE_FRAGMENTS (PAGE_ID, FRAGMENT_ID);

-- associates a fragment with its top level fragments
CREATE TABLE SUB_FRAGMENTS
(
    FRAGMENT_ID INTEGER NOT NULL,
    SUB_FRAGMENT_ID INTEGER NOT NULL
);

CREATE INDEX IX_SUB_FRAGMENTS_1 ON SUB_FRAGMENTS (FRAGMENT_ID, SUBFRAGMENT_ID);


CREATE TABLE FRAGMENT_PARAMETER
(
    PARAMETER_ID INTEGER PRIMARY KEY,
    FRAGMENT_ID INTEGER NOT NULL,
    NAME VARCHAR(80) NOT NULL,
    VALUE LONGVARCHAR NOT NULL
);

CREATE UNIQUE INDEX IX_FRAGMENT_PARAMETER_1 ON FRAGMENT_PARAMETER (FRAGMENT_ID, PARAMETER_ID);

-- names a reference to a fragment subtree
CREATE TABLE FRAGMENT_REF
(
    FRAGMENT_REF_ID INTEGER NOT NULL PRIMARY KEY,
    FRAGMENT_ID INTEGER NOT NULL,
    NAME VARCHAR(80) NOT NULL,
    TITLE VARCHAR(100)
);

CREATE TABLE FRAGMENT_REFS
(
    FRAGMENT_REF_ID INTEGER NOT NULL,
    FRAGMENT_ID INTEGER NOT NULL
);


