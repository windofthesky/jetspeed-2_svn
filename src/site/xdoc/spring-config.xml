<?xml version="1.0"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements.  See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to You under the Apache License, Version 2.0
	(the "License"); you may not use this file except in compliance with
	the License.  You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<document>
	<properties>
		<title>
			Configuring Jetspeed 2.2
		</title>
		<subtitle>How-to configure Jetspeed 2.2 Portal</subtitle>
		<authors>
			<person name="Ate Douma" email="ate@apache.org" />
			<person name="Woonsan Ko" email="woonsan@apache.org" />
		</authors>
	</properties>
	<body>
		<section name="Overview">
            <p>Jetspeed provides very flexible ways for specific configuration settings.</p>
            <p>Jetspeed components are initially loaded from <strong><code>/WEB-INF/assembly/</code></strong> folder, while the default configuration properties are loaded from <strong><code>/WEB-INF/conf/jetspeed.properties.</code></strong></p>
            <p>The initial/default configurations can be overrided through the <strong><code>/WEB-INF/assembly/override/</code></strong> folder, while overrides/additional values can be provided through the <strong><code>/WEB-INF/conf/override.properties.</code></strong></p>
            <p>Another new feature is conditional Spring assembly loading. Jetspeed provides an extended BeanFactory
            which checks a loaded Spring BeanDefinition for some extra meta data (defined within the Spring configuration itself)
            against a predefined configuration, registering a BeanDefinition within Spring can be "prevented", effectively
            filtering out certain definitions.</p>
        </section>
        <section name="Conditional Spring Assembly Loading">
            <subsection name="Jetspeed Category Meta Data">
                <p>
                    In Jetspeed assembly files, a bean definition should have <strong><code>j2:cat</code></strong> meta data like the following example:
                    <div class="source"><pre>&lt;bean name="xmlPageManager" class="org.apache.jetspeed.page.psml.CastorXmlPageManager"&gt;
    &lt;meta key="j2:cat" value="xmlPageManager,pageSerializer" /&gt;
    ...
&lt;/bean&gt;</pre></div>
                    In the above example, the <strong><code>xmlPageManager</code></strong> bean definition has two categories: <strong><code>xmlPageManager</code></strong> and <strong><code>pageSerializer</code></strong>.
                    If the Spring filter key setting of Jetspeed contains one of the categories, then the <strong><code>xmlPageManager</code></strong> bean definition will be registered. Otherwise, the bean definition will be ignored. By the Spring filter key setting, bean definitions in assembly files will be filtered according to their cateogories.
                </p>
            </subsection>
            <subsection name="Spring Filter Keys and Categories Settings">
                <p>The Spring filter settings of Jetspeed are defined in <strong><code>/WEB-INF/conf/spring-filter.properties</code></strong>.</p>
                <p>In the file, the following category definitions are provided by default:
                    <table>
                        <tr>
                            <th>Filter Key</th>
                            <th>Mapped Categories</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>default</td>
                            <td>default</td>
                            <td>Default category for most common components</td>
                        </tr>
                        <tr>
                            <td>basePortal</td>
                            <td>${default}, jndiDS, xmlPageManager</td>
                            <td>
                                The base category for a portal instance, to be used for other cateogry definitions.
                                In this category, the data source component and xml-based page manager are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>portal</td>
                            <td>${basePortal}, dbSecurity</td>
                            <td>
                                The default category for a portal instance.
                                With the components by the basePortal category, the security components based on database are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>portal.ldap</td>
                            <td>${basePortal}, ldapSecurity</td>
                            <td>
                                A category for a portal instance.
                                With the components by the basePortal category, the security components based on LDAP are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>portal.dbPageManager</td>
                            <td>${default}, jndiDS, dbPageManager, dbSecurity</td>
                            <td>
                                A category for a portal instance.
                                In this category, the default components, the data source component and database-based page manager and database-based security components are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>portal.dbPageManager.ldap</td>
                            <td>${default}, jndiDS, dbPageManager, ldapSecurity</td>
                            <td>
                                A category for a portal instance.
                                In this category, the default components, the data source component and database-based page manager and LDAP-based security components are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>baseSerializer</td>
                            <td>jdbcDS, serializer, capabilities, security, profiler, registry, search, transaction, cache, prefs, springProperties, noRequestContext, noPageManager</td>
                            <td>
                                The base category for Jetspeed Serializer, to be used for other serializer cateogry definitions.
                                In this category, the necessary components for seeding and serializing Jetspeed data are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>serializer</td>
                            <td>${baseSerializer}, dbSecurity</td>
                            <td>
                                The default category for serializer. In this category, database-based security components are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>serializer.ldap</td>
                            <td>${baseSerializer}, ldapSecurity</td>
                            <td>
                                A category for serializer. In this category, LDAP-based security components are provided.
                            </td>
                        </tr>
                        <tr>
                            <td>pageSerializer</td>
                            <td>jdbcDS, base, pageSerializer, transaction, springProperties, security, dbSecurity, cache</td>
                            <td>
                                A category for page serializer.
                            </td>
                        </tr>
                    </table>
                </p>
                <p><em>Note: the expression enclosed by ${} will be expanded by the referenced property values.</em></p>
                <p>
                    By default, the filter key of a portal instance is set to <strong><code>portal</code></strong>. To change this, you may define a property, <strong><code>spring.filter.key</code></strong> in one of the following properties files:
                    <strong><code>/WEB-INF/conf/spring-filter-key.properties</code></strong>, <strong><code>/WEB-INF/conf/override.properties</code></strong> or <strong><code>/WEB-INF/conf/jetspeed.properties</code></strong>.
                    For example, you can use Jetspeed Portal with LDAP-based Security components:
                    <div class="source"><pre>spring.filter.key = portal.ldap</pre></div>
                </p>
            </subsection>
            <subsection name="Spring Filter Keys and Dynamic Bean Aliasing">
                <p>Because the ids of every beans must be unique within the BeanFactory or ApplicationContext the bean is hosted in, we cannot use same bean id for several different beans.</p>
                <p>For example, there could be two options to choose page manager bean component: xml-based page manager or database-based page manager. If some other beans should refer the filtered page manager, they should be grouped in a same category as the filtered page manager. So, there should be many redundant bean definitions which make the maintenance very difficult.</p>
                <p>Therefore, Jetspeed provides a way to alias beans dynamically with spring bean filtering solution.
                In the following example, the first two bean definitions do not have id, but they have the same <strong><code>j2:alias</code></strong> meta data value. Jetspeed custom BeanFactory register the alias(es) dynamically according to this meta data.
                Finally, the last bean definition can refer the selected bean by using the alias, <strong><code>org.apache.jetspeed.page.PageManager</code></strong>.
                    <div class="source"><pre>&lt;bean class="org.springframework.beans.factory.config.BeanReferenceFactoryBean"&gt;
  &lt;meta key="j2:cat" value="xmlPageManager" /&gt;
  &lt;meta key="j2:alias" value="org.apache.jetspeed.page.PageManager" /&gt;
  &lt;property name="targetBeanName" value="xmlPageManager" /&gt;
&lt;/bean&gt;

&lt;bean class="org.springframework.beans.factory.config.BeanReferenceFactoryBean"&gt;
  &lt;meta key="j2:cat" value="dbPageManager" /&gt;
  &lt;meta key="j2:alias" value="org.apache.jetspeed.page.PageManager" /&gt;
  &lt;property name="targetBeanName" value="dbPageManager" /&gt;
&lt;/bean&gt;

&lt;bean id="org.apache.jetspeed.portalsite.PortalSite" name="portalSite"
  class="org.apache.jetspeed.portalsite.impl.PortalSiteImpl"&gt;
  &lt;meta key="j2:cat" value="default" /&gt;
  &lt;constructor-arg index="0"&gt;
    &lt;ref bean="org.apache.jetspeed.page.PageManager" /&gt;
  &lt;/constructor-arg&gt;
&lt;/bean&gt;</pre>
                    </div>
                </p>
                <p>
                    <em>Note: multiple alias names can be set to j2:alias meta data value by a string separated by comma or space.</em>
                </p>
            </subsection>
        </section>        
	</body>
</document>
