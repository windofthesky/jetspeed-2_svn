<?xml version="1.0"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements.  See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to You under the Apache License, Version 2.0
	(the "License"); you may not use this file except in compliance with
	the License.  You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<document>
	<properties>
		<title>
			Developing Jetspeed with Eclipse
		</title>
		<subtitle>How-to for Building and Debugging Jetspeed with Eclipse</subtitle>
		<authors>
			<person name="David Sean Taylor" email="taylor@apache.org" />
		</authors>
	</properties>
	<body>
		<section name="Developing with Eclipse">
			<subsection name="The Eclipse Classpath">
            <p>
                Compiling, debugging, external dependencies, source code completion, searching, auto imports, all rely on a properly configured classpath. 
                When you first create a project, a .classpath file is created in the projects root directory. 
                With the Jetspeed source, we provide you with a ready-to-use Eclipse .classpath file.
                We have already configured the relative source directories for you.
                Eclipse provides a .classpath GUI editor from the Project->Properties menu option. 
            </p>
			</subsection>
			<subsection name="JAR files and the Maven-2 repository">
				<p>
                  Jetspeed requires quite a few JAR files to be able to compile.
                  The .classpath file that comes with Jetspeed is setup to get its JAR files out of a local Maven-2 repository.
                  You can see all the JAR file dependencies from Eclipse. Go to Project->Properties->Java Build Path->Libraries.
                  Notice all the JAR files are configured as VARIABLE library entries.
                  Take one example: 
					<source>
                    M2_REPO/commons-lang/jars/commons-lang-2.0.jar                            
					</source>                    
                  The Variable is portion is M2_REPO.
                  The Extension portion is /commons-lang/jars/commons-lang-2.0.jar
                  Eclipse locates the JAR dependency from a Variable location root.
                  In order for this classpath to work correctly, the variable root is dependent on a Maven-2 local repository file structure.                  
				</p>
				<p>
                    To configure the M2_REPO variable, go to Window->Preferences->Java->Build Path->Classpath Variables,
                    click on New, and define a new variable named MAVEN_REPO, pointing it out the root of your local Maven-2 repository,
                    usually someplace like your $HOME/.m2/repository. 
				</p>
			</subsection>
		</section>
		<section name="Debugging with Eclipse and Tomcat">
		<p>Remote debugging of the Jetspeed Portal running on Tomcat requires that you start Tomcat up with debugging enabled.
		Here is a shell script that can be used to debug:
		</p>
<source><![CDATA[
export JPDA_TRANSPORT=dt_socket
export JPDA_ADDRESS=8000
./catalina.sh jpda start
]]></source>
<source><![CDATA[
<p>A DOS script:</p>
set JPDA_TRANSPORT=dt_socket
set JPDA_ADDRESS=8000
catalina jpda start
]]></source>		
<p>From there, just follow the Eclipse documentation on how to remotely debug.</p>
        </section>
	</body>
</document>
