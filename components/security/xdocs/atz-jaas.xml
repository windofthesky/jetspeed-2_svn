<?xml version="1.0"?>
<!--
    Copyright 2004 The Apache Software Foundation
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
    <properties>
        <title>Jetspeed 2 Security - Login Module</title>
        <authors>
            <person name="David Le Strat" email="dlestrat@apache.org" />
        </authors>
    </properties>
    <body>
        <section name="Overview of JAAS Authorization">
            <p>
                A good overview of JAAS authorization is provided on 
                <a href="http://java.sun.com/j2se/1.4.2/docs/guide/security/spec/security-spec.doc2.html">Sun's web site</a>.
                At a high level, JAAS authorization leverages:
                <ul>
                    <li><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Permission.html">Permission</a>
                    that associates actions to resources.</li>
                    <li><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Principal.html">Principal</a>
                    that represents an entity in the system.  In Jetspeed 2, 3 principals are used to represent users,
                    roles and groups.</li>
                    <li><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/Policy.html">Policy</a>
                    that associates principals to permissions.</li>
                </ul>
            </p>   
            <p>
                Jetspeed 2 provides a custom policy implemention that allow the portal to secure resources as follow:
                <source><![CDATA[
grant principal o.a.j.security.UserPrincipal "theUserPrincipal" {
  permission o.a.j.security.PagePermission "mypage", "view";
  permission o.a.j.security.PortletPermission "myportlet", "view,edit,minimize,maximize";
  permission o.a.j.security.TabPermission "mytab", "view";
};

grant principal o.a.j.security.RolePrincipal "theRolePrincipal" {
  permission o.a.j.security.PagePermission "mypage", "view";
  permission o.a.j.security.PortletPermission "myportlet", "view,edit,minimize,maximize";
  permission o.a.j.security.TabPermission "mytab", "view";
};   

grant principal o.a.j.security.GroupPrincipal "theGroupPrincipal" {
  permission o.a.j.security.PagePermission "mypage", "view";
  permission o.a.j.security.PortletPermission "myportlet", "view,edit,minimize,maximize";
  permission o.a.j.security.TabPermission "mytab", "view";
};]]>
                </source>
            </p> 
            <p>
                The custom security policy provides a <code>java.security.Policy</code> implementation that
                stores the association between principals and permissions in a relational database as opposed to
                leveraging the default JDK policy.  In the case of Sun's JDK, the default policy is 
                <a href="http://java.sun.com/j2se/1.4.2/docs/guide/security/PolicyFiles.html#DefaultImpl">sun.security.provider.PolicyFile</a>
                a file based policy.
            </p>
            <p>
                In the code sample above, the <code>UserPrincipal</code> identify with the <code>Principal.getName()</code> 
                &quot;theUserPrincipal&quot; has permission to &quot;view&quot; the page called &quot;mypage&quot;, to
                &quot;view,edit,minimize,maximize&quot; the portlet portlet called &quot;myportlet&quot;      
            </p>
            <p>
                The <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/AccessController.html">AccessController</a>
                validates a <code>Subject</code> permissions.  For instance, a page permission check would perform the following
                check:
                <source><![CDATA[
PagePermission permission = new PagePermission(path, actions);
AccessController.checkPermission(permission);                
                ]]></source>
            </p>
        </section>
        <section name="Jetspeed JAAS Policy">
            <p>
                The <code>RdbmsPolicy</code> implements <code>java.security.Policy</code>.  It leverages the 
                <code>PermissionManager</code> to get the permissions associated with a given <code>Subject</code>
                principals.
                <source><![CDATA[
pms.getPermissions(user.getPrincipals());
                ]]></source>
                The class diagram below illustrate the association between the <code>RdbmsPolicy</code> and 
                the <code>PermissionManager</code>.
            </p>
            <p>
                A good article on custom policies implementation is available on 
                <a href="http://www-106.ibm.com/developerworks/library/j-jaas/?n-j-442">IBM web site</a>.
            </p>
            <p>
                <img src="images/rdbms-policy-c.gif" border="0"/>
            </p>
            <p>
                To get more detail about the implementation of the <code>PermissionManager</code>, see 
                <a href="permission.html">PermissionManager Overview</a>.
            </p>
            <p>
                <u>Note:</u> The current <code>RdbmsPolicy</code> manages the policies to apply.  It applies <code>RdbmsPolicy</code>
                in conjunction with the default policy configured in the runtime environment. 
                Jetspeed 2 should explore providing
                <a href="http://java.sun.com/j2ee/javaacc/index.html">JACC</a> adapters for its custom policy for
                specific application servers.
            </p>
        </section>
    </body>
</document>