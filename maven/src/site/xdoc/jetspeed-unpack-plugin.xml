<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  $Id$
-->
<document>
  <properties>
    <title>Configuration and usage of the jetspeed-unpack:unpack Maven Plugin</title>
    <authors>
      <person name="Ate Douma" email="ate@douma.nu" />
    </authors>
  </properties>
  <body>
    <section name="Configuration and usage of the jetspeed-unpack:unpack Maven Plugin">
      <p>
        The Jetspeed Unpack Maven Plugin provides one goal: <strong><code>jetspeed-unpack:unpack</code></strong>, which can be used to extract selected resources
        from a (remote) Maven artifact or an local (archive) file.
      </p>
      <p>
        At the time this plugin was written, none of the required features was fully available from other (standard) Maven plugins.
      </p>
      <p>
        Now, some of these features are also possible using the standard Maven Dependency Plugin
        <a href="http://maven.apache.org/plugins/maven-dependency-plugin/unpack-mojo.html">dependency:unpack</a> goal or the Remote Resources Plugin
        <a href="http://maven.apache.org/plugins/maven-remote-resources-plugin/process-mojo.html">remote-resources:process</a> goal.
      </p>
      <p>
        However, this wasn't yet the case initially, and still the jetspeed-unpack plugin is easier to configure and use.<br/>
        Furthermore, the same functionallity as provided by this plugin is also available embedded within the <a href="jetspeed-db-init-plugin.html">jetspeed-db:iniit</a> plugin using
        exactly the same configuration.
      </p>
      <p>
        This plugin is intended to be used as attached to the Maven <strong><code>process-resources</code></strong> or possibly <strong><code>generate-resources</code></strong>
        lifecycle phase for embedding pre-defined resources in a final Maven artifact like a war file, or use such resources for integration tasks like deploying (possibly filtered)
        configuration files to a target environment application server. 
      </p>
      <subsection name="Side track: the jetspeed-portal-resources artifact">
        <p>
          While this plugin is not dependent on the <strong><code>jetspeed-portal-resources</code></strong> artifact in anyway (nor on any other part of Jetspeed-2 for that matter),
          it is primarily written and used for unpacking specific pre-packaged Jetspeed-2 Portal resources.  
        </p>
        <p>
          The <a href="jetspeed-portal-resources.html">Jetspeed Portal Resources</a> page further describes the jetspeed-portal-resources artifact and its intended usage.
        </p>
      </subsection>
    </section>
    <section name="Quick Overview">
      <p>
        This is a listing of all the elements which can be configured for the jetspeed:unpack plugin:
      </p>
      <p>
        <source><![CDATA[<plugin>
  <groupId>org.apache.portals.jetspeed-2</groupId>
  <artifactId>jetspeed-unpack-maven-plugin</artifactId>
  <version>${org.apache.portals.jetspeed.version}</version>
  <configuration>

    <unpack>
      <artifact>...</artifact>
      <file>...</file>
      <targetDirectory>...</targetDirectory>
      <overwrite>...</overwrite>            
      <resources combine.children="append">

        <resource>
          <path>...</path>
          <destination>...</destination>
          <overwrite>...</overwrite>
          <flat>...</flat>
          <include>...</include>
          <exclude>...</exclude>
        </resource>
        ...
      </resources>
    </unpack>

    <skip>...</skip>
    <verbose>...</verbose>

  </configuration>
</plugin>]]></source>
        </p>
    </section>
    <section name="Configuration">
      <subsection name="Resource archive specification and references">
        <h4>Using Maven artifacts as resource archive</h4>
        <p>
          As with the <a href="jetspeed-db-init-plugin.html">jetspeed-db:init</a> plugin and the <a href="jetspeed-deploy-plugin.html">jetspeed-deploy:deploy</a> plugin,
          the jetspeed-unpack plugin can (and primarily is intended to) use Maven Artifacts retrieved from the local Maven repository as resource (archives).
        </p>
        <p>
          To use Maven artifacts as resource archive they need to be specified as plugin dependencies:
        <source><![CDATA[<plugin>
  <groupId>org.apache.portals.jetspeed-2</groupId>
  <artifactId>jetspeed-unpack-maven-plugin</artifactId>
  <version>${org.apache.portals.jetspeed.version}</version>
  ...
  <dependencies>
    <dependency>
      <groupId>org.apache.portals.jetspeed-2</groupId>
      <artifactId>jetspeed-portal-resources</artifactId>
      <version>${org.apache.portals.jetspeed.version}</version>
    </dependency>
  </dependencies>
</plugin>]]></source>
          <em>
            Note: Maven 2.0 (as of now, version 2.0.9) <strong>requires</strong> that for a plugin dependency its &lt;version/&gt; is defined, even if a default version is
            configured in the project &lt;dependencyManagement/&gt; section for the same artifact.</em>
        </p>
        <p>
          As standard Maven functionality, if such a dependency isn't available yet from the local Maven repository, it will automatically (try to) download it from a
          remote Maven repository.
        </p>
        <h4>Referencing a plugin dependency as resource archive</h4>
        <p>
          To actually use a specific resource archive specified as a plugin dependency it can be referenced with:
          <source><![CDATA[<artifact>${groupId}:${artifactId}:${packaging}</artifact>]]></source>
          <em>Note: the default packaging of a dependency is <strong><code>jar</code></strong></em>
        </p>
        <p>
          Using the <strong><code>jetspeed-portal-resources</code></strong> artifact as example, its artifact <em>reference</em> configuration would be:
          <source><![CDATA[<artifact>org.apache.portals.jetspeed-2:jetspeed-portal-resources:jar</artifact>]]></source>
        </p>
        <p>
          Note: the same type of definition and usage of (remote) Maven repository artifacts is also used by the <a href="jetspeed-db-init-plugin.html">jetspeed-db:init</a> and
          <a href="jetspeed-deploy-plugin.html">jetspeed-deploy:deploy</a> plugins.
        </p>
        <h4>Using a local file archive</h4>
        <p>
          Alternatively, it is also possible to directly use local archive files, in which case a <strong><code>file</code></strong>
          element should be specified instead of an <strong><code>artifact</code></strong> element:
          <source><![CDATA[<file>localArchiveFilePath</file>]]></source>
        </p>
      </subsection>
      <subsection name="Plugin configuration">
        <p>
          The jetspeed-unpack plugin allows two general options to be configured besides specific <strong><code>unpack</code></strong> configurations:
        </p>
        <table>
          <tr>
            <th>Element</th>
            <th width="90%">Description</th>
          </tr>
          <tr>
            <td>skip</td>
            <td>
              <code>default: false</code><br/>
              This optional element is primarly intended to allow skipping plugin execution under certain conditions, like <em>not</em> extracting resources
              which are only needed when actually performing unit tests:
        <source><![CDATA[<phase>process-test-resources</phase>
  <configuration
    <skip>${maven.test.skip}</skip>
    ...
  </configuration>]]></source>
              Maven always invokes plugins attached to the <strong><code>process-test-resources</code></strong> phase, regardless if it actually is going to execute
              unit tests.
            </td>
          </tr>
          <tr>
            <td>verbose</td>
            <td>
              <code>default: false</code><br/>
              When unpacking resources, the <strong><code>verbose</code></strong> setting controls if detailed logging is performed which files are extracted.<br/>
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="unpack configuration">
        <p>
          As already described above, the actual resource archive to unpack from has to be specified either as <strong><code>artifact</code></strong> reference or
          local <strong><code>file</code></strong>.
        </p>
        <p>
          <em>
            But if only one plugin dependency is specified, no resource archive has to be specified, in which case the single plugin dependency will be
            used as resource archive.
          </em>
        </p>
        <p>
          Additionally, two other optional unpack configuration elements can be speficied:
        </p>
        <table>
          <tr>
            <th>Element</th>
            <th width="90%">Description</th>
          </tr>
          <tr>
            <td>targetDirectory</td>
            <td>
              <code>default: ${project.build.directory}</code><br/>
              The targetDirectory is used as <strong><em>base</em></strong> directory under which the selected resources from the resource archive will be extracted.<br/>
              If this directory does not yet exist, it will be created by the plugin automatically before (possibly) extracting resources.  
            </td>
          </tr>
          <tr>
            <td>overwrite</td>
            <td>
              <code>default: true</code><br/>
              When a selected resource from the resource archive already exists in its target directory, the overwrite setting will determine if the existing resource
              is overwritten, even if it has a more recent timestamp than the archived resource.<br/>
              Note: if the archived resource has a more recent timestamp the existing resource will <em>always</em> be overwritten.<br/>
              This setting can also be overruled for specific <strong><code>resource</code></strong> configurations (see below).
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="&lt;resources combine.children=&quot;append&quot;&gt;">
        <p>
          A potentially very important part of the configuration is the <strong><code>combine.children="append"</code></strong> attribute specified
          for the <strong><code>resources</code></strong> element.
        </p>
        <p>
          Maven 2 plugin configuration parsing (using Xpp3) by default <strong><em>merges</em></strong> configuration elements for children elements if not defined!
          This default behavior allows to only define <strong>overriding</strong> properties for a certain configuration element.
        </p>
        <p>
          But, for the resources configurations this is <strong><em>not</em></strong> very convenient because it requires to specify <strong><em>all</em></strong> optional properties for
          a <strong><code>resource</code></strong> element to prevent "merging in" property values from <em>unrelated</em> previously defined resource elements.
        </p>
        <p>
          To solve this inconvenience, a <strong><code>combine.children="append"</code></strong> attribute can be specified on a parent element to use <strong><em>append</em></strong>
          instead of <strong><em>merge</em></strong> when parsing the child elements.
        </p>
        <p>
          For the jetspeed-unpack plugin defining this attribute is recommended <em><strong>unless</strong></em> only one, or exactly similar resource child elements are configured 
          (e.g. using all the same set of elements).
        </p>
      </subsection>
      <subsection name="resource configuration">
        <p>
          The final part of the jetspeed-unpack plugin configuration concern the actual resoure(s) to unpack:
        <source><![CDATA[<resource>
  <path>/conf/tomcat</path>
  <destination>tomcat</destination>
  <include>context.xml</include>
</resource>]]></source>
          The above example will extract the context.xml resource from the conf/tomcat folder within the resource archive and write it to a sub directory tomcat of the project
          build directory or otherwise specified (base) targetDirectory.
        </p>
        <p>
          Note: it is not required to specify any resource configuration. If none is specified <em>all</em> resources from the resource archive will be extracted!  
        </p>
        <p>
          The following (all optional) elements can be defined for a specific <strong><code>resource</code></strong> configuration:
        </p>
        <table>
          <tr>
            <th>Element</th>
            <th width="90%">Description</th>
          </tr>
          <tr>
            <td>path</td>
            <td>
              <code>default: /</code><br/>
              The path specifies the sub folder within the resource archive as (base) path to search resources to extract.
            </td>
          </tr>
          <tr>
            <td>destination</td>
            <td>
              <code>default: ${configuration.targetDirectory}</code><br/>
              If defined, the destination specifies the sub directory of the default project build directory or the otherwise specified <strong><code>targetDirectory</code></strong>
              of the plugin where the matched resource(s) will be unpacked. 
            </td>
          </tr>
          <tr>
            <td>overwrite</td>
            <td>
              <code>default: ${unpack.overwrite}</code>
              If defined, overwrite overrules the default overwrite setting of the unpack element (see above).              
            </td>
          </tr>
          <tr>
            <td>flat</td>
            <td>
              <code>default: false</code><br/>
              By default resources to be extracted from the resource archive are written out to a sub directory of the target destination directory (see above) using their
              relative position of the (base) path within the resource archive where they have been looked up against.<br/>
              For example, with the following (probably incorrect) resource configuration:
        <source><![CDATA[<resource>
  <path>conf</path>
  <destination>tomcat</destination>
  <include>tomcat/context.xml</include>
</resource>]]></source>
              the matched context.xml resource will be written out to: ${targetDirectory}/tomcat/tomcat/context.xml<br/><br/>
              For this kind of configurations (and sometimes these are needed), defining &lt;flat&gt;true&lt;flat&gt; will "drop" the relative position of the resource.<br/>
              Then, only its entry name will be used, resulting in (the probably desired): ${targetDirectory}/tomcat/context.xml<br/><br/>
              Of course the same result can also (and even simpler) be achieved using:
        <source><![CDATA[<resource>
  <path>conf</path>
  <include>tomcat/context.xml</include>
</resource>]]></source>
            </td>
          </tr>
          <tr>
            <td>include</td>
            <td>
              <code>default: ${resource.path}/**</code><br/>
              The include element can define a comma separated list of resources to extract.<br/>
              These may contain (standard Ant like) wildcards and sub folder references relative to the (base) path sub folder within the resource archive:
        <source><![CDATA[<include>profile.xml,security*.xml,boot/*.xml</include>]]></source>
            </td>
          </tr>
          <tr>
            <td>exclude</td>
            <td>
              <code>default: <em>none</em></code><br/>
              Potentially mached resources to extract (see include above) may be excluded from extraction using the exclude element.<br/>
              Like with the include element, the exclude element can define a comma separated list of resources to <em>exclude</em>. 
              These also may contain (standard Ant like) wildcards and sub folder references relative to the (base) path sub folder within the resource archive:
        <source><![CDATA[<exclude>security-spi*.xml,security-managers.xml</exclude>]]></source>
            </td>
          </tr>
        </table>
        <p>
          As can be determined from the above, as all resource configuration elements are optional, specifying an empty &lt;resource/&gt; definition will simply
          extract all the resources from the archive to the targetDirectory. 
        </p>
      </subsection>
    </section>
    <section name="Examples">
      <subsection name="Unpacking of jetspeed unit test resources"> 
      <p>
        The following example taken from the Maven project file for the jetspeed-profiler component extracts several Spring assembly files, all files from the db-ojb folder
        and the seed/min/j2-seed.xml file to the project testOutputDirectory as needed for running the unit tests: 
        <source><![CDATA[<plugin>
  <groupId>${pom.groupId}</groupId>
  <artifactId>jetspeed-unpack-maven-plugin</artifactId>
  <version>${pom.version}</version>
  <executions>
    <execution>
      <id>unpack-test-resources</id>
      <goals>
        <goal>unpack</goal>
      </goals>
      <phase>process-test-resources</phase>
      <configuration>
        <skip>${maven.test.skip}</skip>
        <unpack>
          <targetDirectory>${project.build.testOutputDirectory}</targetDirectory>
          <resources>
            <resource>
              <path>assembly</path>
              <include>profiler.xml,transaction.xml,cache.xml,security-*.xml,boot/datasource.xml</include>
            </resource>
            <resource>
              <path>db-ojb</path>
            </resource>
            <resource>
              <path>seed/min</path>
              <include>j2-seed.xml</include>
            </resource>
          </resources>
        </unpack>
      </configuration>
    </execution>
  </executions>
</plugin]]></source>
        The interesting part of this example is that <em><strong>NO</strong></em> resource archive is specified!
      </p>
      <p>
        But the above example actually does work because the root Maven project file for the Jetspeed-2 Portal project already defined the jetspeed-portal-resources artifact
        as default dependency for the jetspeed-unpack plugin in its dependencyManagement section:  
        <source><![CDATA[<plugin>
  <groupId>org.apache.portals.jetspeed-2</groupId>
  <artifactId>jetspeed-unpack-maven-plugin</artifactId>
  <version>${pom.version}</version>
  <dependencies>
    <dependency>
      <groupId>${groupId}</groupId>
      <artifactId>jetspeed-portal-resources</artifactId>
      <version>${pom.version}</version>
    </dependency>
  </dependencies>
</plugin>]]></source>
        But please note: this is a special use-case which only works when only one dependency is (pre)configured. 
      </p>
      </subsection>
      <subsection name="Unpacking the tomcat context.xml to be filtered before deployment">
        <p>
          A more elaborate and common use-case is extracting a specific resource during the generate-resources lifecycle phase so that it can be filtered
          (using the standard Maven resources plugin):
        <source><![CDATA[<plugins>
  <plugin>
    <groupId>org.apache.portals.jetspeed-2</groupId>
    <artifactId>jetspeed-unpack-maven-plugin</artifactId>
    <version>${org.apache.portals.jetspeed.version}</version>
    <executions>
      <execution>
        <id>unpack-appserver</id>
        <goals>
          <goal>unpack</goal>
        </goals>
        <phase>generate-resources</phase>
        <configuration>
          <unpack>
            <artifact>org.apache.portals.jetspeed-2:jetspeed-portal-resources:jar</artifact>
            <resources>
              <resource>
                <path>conf</path>
                <include>tomcat/context.xml</include>
              </resource>
            </resources>
          </unpack>
        </configuration>
      </execution>
    </executions>
  <dependencies>
    <dependency>
      <groupId>org.apache.portals.jetspeed-2</groupId>
      <artifactId>jetspeed-portal-resources</artifactId>
      <version>${org.apache.portals.jetspeed.version}</version>
    </dependency>
  </dependencies>
  </plugin>
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-resources-plugin</artifactId>
    <executions>
      <execution>
        <id>resources</id>
        <goals>
          <goal>resources</goal>
        </goals>
        <phase>process-resources</phase>
      </execution>
    </executions>
  </plugin>
</plugins>
...
<resources>
  <resource>
    <directory>${project.build.directory}/tomcat</directory>
    <targetPath>../resources</targetPath>
    <filtering>true</filtering>
  </resource>
</resources>]]></source>
          This example is taken from a custom Maven project file invoked with the <a href="jetspeed-mvn-plugin.html">jetspeed-mvn</a> plugin for deploying a custom Jetspeed-2 Portal
          on a Tomcat server.
        </p>
        <p>
          The standard Maven Resources Plugin is also configured in this example because a custom jetspeed-mvn Maven project file is commonly configured using
          &lt;packaging&gt;pom&lt;/packaging&gt;.<br/>
          Such custom jetspeed-mvn project files are used for executing specific integration tasks, not for producing a "normal" artifact like a jar or war file.<br/>
          But as a pom project doesn't have the maven-resources-plugin attached to its lifecycle it needs to be configured directly to have it perform the needed
          resource filtering during the process-resources phase. 
        </p>
      </subsection>
    </section>
  </body>
</document>