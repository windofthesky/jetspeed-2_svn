<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
    <properties>
        <title>Jetspeed 2 Pipelines</title>
        <subtitle>Guide to Jetspeed Pipelines</subtitle>
        <authors>
            <person name="David Sean Taylor" email="taylor@apache.org" />
        </authors>
    </properties>
    <body>
        <section name="Jetspeed Pipelines">
            <p>
				Pipelines are based on the inversion of control pattern.
				The request processing pipeline is assembled to run in the Spring
				container. A portal is largely driven by a request/response processing
				data flow, much like the servlet or HTTP request/response paradigm.
				Requests are made by client agents such as HTML or WAP browsers,
				and the portal processes the request on the thread provided by the
				application server for which Jetspeed is running. Request processing is
				achieved in a workflow like pipeline, where valves are plugged into the
				request pipeline. The workflow of the valves is configurable just like
				any other Spring component. Pipelines reference (via Spring
				constructor based dependency) one or more valves. Valves are also
				Spring components.	 
            </p>
            <p>
				Requests to the portal always come in via a Portal URL. Jetspeed has
				URI entry points. The servlet context (/jetspeed) is also easily
				configurable. Additionally, the request URL can be mapped to a portlet
				pipeline. The default pipeline aggregates portlet pages. Portlet pages
				are usually defined with the extension .PSML. If a page is not
				supplied, default pages can be configured.            
            </p>            
            <subsection name='Pipeline Driven Processing'>
	            <p>
					Requests to the portal always come in via a Portal URL. Jetspeed has
					URI entry points. The servlet context (/jetspeed) is also easily
					configurable. Additionally, the request URL can be mapped to a portlet
					pipeline. The default pipeline aggregates portlet pages. Portlet pages
					are usually defined with the extension .PSML. If a page is not
					supplied, default pages can be configured.
				</p>
        		<p>
					<img src="images/pipeline-driven-processing.jpg" border="0"/><br/><br/>
				</p>
            </subsection>
            <subsection name='Pipeline Architecture'>
	            <p>
					In Jetspeed-2 requests are processed through a series
					of Valve assembled together as a pipeline.
				</p>          
				<p>
					<img src="images/pipelines.jpg" border="1"/><br/><br/>
				</p>				
            </subsection>
            <subsection name='Pipeline Mappings'>
            	<p>
					Pipelines mappings allow for prefixed mappings of /
					context path + servlet path to be mapped to a
					pipeline. For example:
				</p>
				<p>
<source><![CDATA[
/jetspeed/portal --> Jetspeed Pipeline
/jetspeed/ajax --> Ajax Pipeline
/jetspeed/portlet --> Portlet Pipeline
/jetspeed/fileserver/file.pdf --> File Servlet Pipeline
/jetspeed/fileserver.file.html --> File Servlet Pipeline
/jetspeed/desktop --> Desktop Pipeline
]]></source>
				</p>
			</subsection> 
            <subsection name='Pipeline Mapping Configuration'>
				<p>
					The Pipeline Mapping Configuration can be found in <strong><code>/WEB-INF/assembly/pipelines.xml</code></strong>.				
				</p>				
				<p>
<source><![CDATA[
  <bean id='pipeline-map'
        class='java.util.HashMap'>
    <constructor-arg>
        <map>
            <entry key='/portlet'>
                <value>portlet-pipeline</value>
            </entry>            
            <entry key='/portal'>
                <value>jetspeed-pipeline</value>
            </entry>
            <entry key='/ajaxapi'>
                <value>ajax-pipeline</value>
            </entry>
            <entry key='/login'>
                <value>jetspeed-pipeline</value>
            </entry>            
            <entry key='/fileserver'>
                <value>fileserver-pipeline</value>
            </entry>
            <entry key='/ajax'>
                <value>ajax-direct-pipeline</value>
            </entry>
            <entry key='/desktop'>
                <value>desktop-pipeline</value>
					<!-- for jetspeed desktop, the keys /desktop, /action and /render cannot be changed -->
					<!-- without also editing src/webapp/javascript/jetspeed/common.js and these beans: -->
					<!--    the JetspeedDesktop bean expects argument for /desktop (3rd arg in constructor) -->
					<!--    the DesktopPluto bean expects arguments for /desktop, /action and /render -->
					<!--    the DesktopPortalURL bean expects arguments for /render and /action -->
					<!--    the desktopEncoderRedirectValve bean expects arguments for /desktop and /render -->
            </entry>            
            <entry key='/action'>
                <value>desktop-action-pipeline</value>
            </entry>
            <entry key='/render'>
                <value>desktop-render-pipeline</value>
            </entry>
            <entry key='/configure'>
                <value>configure-pipeline</value>
            </entry>            
            <entry key='/dtconfigure'>
                <value>dtconfigure-pipeline</value>
            </entry>                        
            <entry key='/healthcheck'>
                <value>healthcheck-pipeline</value>
            </entry>
        </map>        
    </constructor-arg>        
  </bean>
]]></source>
				</p>				
            </subsection>				 
            <subsection name='Pipeline Valves'>
	            <p>
					Valves are units of work along the pipeline workflow. Typically valves
					represent access to a Jetspeed feature or component, such as
					aggregation, security, action processing, or device capabilities.
				</p>
        		<p>
					<img src="images/pipeline-valve.jpg" border="0"/><br/><br/>
				</p>				          
				<p>
					The Jetspeed Pipeline has a request context associated with the entire
					request pipeline. Using the Request Context API, valves can add or
					retrieve bits of information to the pipeline request process.
				</p>          
				<table>
					<tr>
						<th>Valve</th>
						<th>Description</th>
					</tr>
					<tr>
						<td>Capabilities Valve</td>
						<td>Identifies the Capability Map, character encoding, media and
							Mime types for the browser to the Request Context, sets the
							content type in the response.
						</td>
					</tr>
					<tr>
						<td>Portal URL Valve</td>
						<td>Creates the internal Portal URL from the request URL and
							parameters using the Navigational State component.
						</td>
					</tr>
					<tr>
						<td>Security Valve</td>
						<td>Builds the Java Security subject for the request, and runs all
							remaining valves for this request under a privileged action,
							enabling Java Security checks against the default Jetspeed
							(JAAS) security policy, or, if configured, another standard
							JAAS policy.
						</td>
					</tr>
					<tr>
						<td>Localization Valve</td>
						<td>Sets the Locale (java.util.Locale) into the request context for
							Java standard internationalization support.
						</td>
					</tr>
					<tr>
						<td>Profiler Valve</td>
						<td>Uses the Profiler, Site Manager, and Page Manager components
							to locate the requested page and menu "site" navigations.
						</td>
					</tr>
					<tr>
						<td>Action Valve</td>
						<td>Determines the targeted action window in the request, if
							found, executes the action via the portlet container. This is
							the standard “action phase”, blocking all rendering. At
							completion of the action phase, the action valve redirects
							back to the portal to process the render phase.
						</td>
					</tr>
					<tr>
						<td>Decorator Valve</td>
						<td>Builds the actions available on the page and all portlet windows.</td>
					</tr>
					<tr>
						<td>Aggregator Valve</td>
						<td>Executes the standard “render phase”, where the actual
							rendering of all portlets and page decorations occurs.
						</td>
					</tr>
					<tr>
						<td>Desktop Valve</td>
						<td>Renders the skeleton of the Jetspeed Desktop. All desktop
							portlet rendering is controlled on the client side, with
							javascript and the portlet pipeline.
						</td>
					</tr>
					<tr>
						<td>Desktop Action Valve</td>
						<td>Executes Jetspeed Desktop actions over the span of one
							request. The client-side desktop controls the execution of
							the action phase, and then the subsequent render phases,
							achieving parallel processing from the client-side.
						</td>
					</tr>										
				</table><br/>				
            </subsection>				  
           
        </section>
    </body>
</document>
