<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<document>
    <properties>
        <title>Portlet Caching</title>
        <subtitle>Portlet Caching</subtitle>
        <authors>
            <person name="David Sean Taylor" email="taylor@apache.org" />
        </authors>
    </properties>
    <body>
        <section name="Portlet Expiration Caching">
            <p>
				The Expiration Cache for specific portlets is declared in your portlet.xml deployment descriptor. 
				At runtime, you can also modify the cache in the <a href='../adminguide/pam.html'>Registry admin</a> for your portlet. 
				Caching content helps improve the Portal response time for users. An expiration
				mechanism is provided on a per portlet basis. Be careful with this feature as cached content, in the Portlet 1.0 specification, the cache is not shared across users.
				Each user will receive their own cached content. This feature can use up a lot of memory when you have thousands of users.
				The real advantage to using portlet caching is when you have content that is very expensive, performance-wise, to produce.
				</p>
				<p>
				Expiration times are defined in the portlet.xml and are specified in seconds:
<source><![CDATA[
<portlet>
	<expiration-cache>300</expiration-cache>
</portlet>
]]></source>
				<ul>
					<li>A value of 0 indicates information is never cached.</li>
					<li>A value of -1 indicates the cache never expires.</li>
				</ul>
            </p>

		<subsection name="Jetspeed Caches">
		<p>The Jetspeed portal maintains its several system caches to increase portal performance. These caches can be made <a href='distributed-cache.html'>distributed</a>, but n the default deployment, they are not distributed.
		 The <code>ehcache.xml</code> file, found under <code>WEB-INF/classes</code>, configures the Jetspeed system caches.
		 </p>
		 <p>
<table>
	<tr>
		<th colspan="3">Jetspeed Caches</th>
	</tr>				
	<tr>
		<th>Cache</th>
		<th>Description</th>
		<th>Parameters</th>
	</tr>				
	<tr>
		<td>portletContentCache</td>
		<td>JSR-168 Portlet Content Cache
    This cache implements the JSR-168 caching specification (see Portlet Expiration Caching above).
    The timeToIdle and timeToLive are set to defaults here, but are
    always overriden on a per cache-element basis based on the portlet deployment
    descriptor value. If there are more than 10000 elements it will not by default, overflow to the
    disk cache, which in this configuration will go to wherever java.io.tmp is
    defined on your system. On a standard Linux system this will be /tmp
    timeToIdleSeconds and timeToLiveSeconds to live are both set at 8 hours (28800) 
    this is the default setting for portlets who set their expiration cache as -1
    </td>
    <td>10,000 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>
	</tr>
	<tr>
		<td>preferencesCache</td>
		<td>Caches all preference nodes as elements, including user and default preferences. A single user preference can be represented by as many as 8 nodes in memory per user. When calculating
		your cache size, also consider the default preferences along with the per user preferences requirements. Also see the section below on <code>Preferences Cache Preloading</code> for instructions on preloading the preferences cache.</td>
        <td>10,000 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>
	</tr>
	<tr>
		<td>portletApplicationNameCache</td>
		<td>Portlet Applications are cached by application name. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
    	<td>500 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>portletApplicationOidCache</td>
		<td>Portlet Applications are cached by object id. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
    	<td>500 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>portletDefinitionNameCache</td>
		<td>Portlet Definition are cached by portlet unique name. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
    	<td>2000 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>portletDefinitionOidCache</td>
		<td>Portlet Definition are cached by object id. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
    	<td>2000 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>decorationConfigurationCache</td>
		<td></td>
	    <td>500 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>portletWindowCache</td>
		<td>Caches portlet window accessor objects to speed up access for portlet fragment to window lookups</td>
	    <td>200 elements, time to idle/live = 8 hours, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>pageManagerOidCache</td>
		<td>Pages are cached by object id. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
	    <td>128 elements, time to idle/live = 150 seconds, overflow to disk = false, LFU</td>		
	</tr>
	<tr>
		<td>pageManagerPathCache</td>
		<td>Pages are cached by the page full path. This cache is hooked into the object-relational database cache and is essential for reasonable performance of the portal.</td>
	    <td>128 elements, time to idle/live = 150 seconds, overflow to disk = false, LFU</td>		
	</tr>
</table>		 
</p>

		 <p>
<table>
	<tr>
		<th colspan="2">General Cache Settings in ehcache.xml</th>
	</tr>				
	<tr>
		<th>Setting</th>
		<th>Description</th>
	</tr>				
	<tr>
		<td>maxElementsInMemory</td>
		<td>Sets the maximum number of objects that will be created in memory</td>
	</tr>
	<tr>
		<td>maxElementsOnDisk</td>
		<td>Sets the maximum number of objects that will be maintained in the DiskStore
        The default value is zero, meaning unlimited.</td>
	</tr>
	<tr>
		<td>eternal</td>
		<td> Sets whether elements are eternal. If eternal,  timeouts are ignored and the
    element is never expired.</td>
	</tr>
	<tr>
		<td>overflowToDisk</td>
		<td>Sets whether elements can overflow to disk when the memory store
    has reached the maxInMemory limit.</td>
	</tr>
	<tr>
		<td>timeToIdleSeconds (optional)</td>
		<td> Sets the time to idle for an element before it expires.
    i.e. The maximum amount of time between accesses before an element expires
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that an Element can idle for infinity.
    The default value is 0.</td>
	</tr>
	<tr>
		<td>timeToLiveSeconds (optional)</td>
		<td>Sets the time to live for an element before it expires.
    i.e. The maximum time between creation time and when an element expires.
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that and Element can live for infinity.
    The default value is 0.</td>
	</tr>
	<tr>
		<td>memoryStoreEvictionPolicy</td>
		<td>Policy would be enforced upon reaching the maxElementsInMemory limit. Default
    policy is Least Recently Used (specified as LRU). Other policies available -
    First In First Out (specified as FIFO) and Less Frequently Used
    (specified as LFU)</td>
	</tr>
	</table>
		 </p>

		</subsection>
		<subsection name='Preferences Cache Preloading'>
		<p>To help with preferences performance, preferences can be preloaded at system started. See the Spring configuration file <code>prefs.xml</code> to modify the loading
		of preferences into the preference cache at Jetspeed startup. Both default and user (entity) preferences can be optionally preloaded. The default setting is to 
		preload all all preferences for the j2-admin portlet application. See the constructor argument 2 on the <code>PreferencesProviderImpl</code> service, to modify the 
		list of portlet applications default preferences to preload. Leave the list empty to not preload default preferences. The third constructor argument determines 
		whether all user (entity) preferences are preloaded or not. The default is to not preload. Be very careful with this setting as it can result in quickly running out
		of memory at startup.  
		</p>

<source><![CDATA[	
        <!-- list of portlet applications default preferences to preload, leave list empty to not preload -->
        <constructor-arg index='2'>
	    <list>
    		<value>j2-admin</value>
        </list>
        </constructor-arg>
        <!--  preload ALL Entities: warning this can chew up lots of memory -->
        <constructor-arg index='3'><value type="boolean">false</value></constructor-arg>
]]></source>
		
		</subsection>
        </section>
    </body>
</document>
