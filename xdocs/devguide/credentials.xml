<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
        <title>Jetspeed 2 Security - Credentials Management</title>
        <authors>
            <person name="David Le Strat" email="dlestrat@apache.org" />
            <person name="Ate Douma" email="ate@douma.nu" />
        </authors>
    </properties>
    <body>
        <section name="Credentials Management Overview">
          <subsection name="DefaultCredentialHandler Features">
            <p>
                With the Jetspeed <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/DefaultCredentialHandler.html">
                <code>DefaultCredentialHandler</code></a> special management of password credentials can
                easily be configured. Through the provided 
                <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/spi/PasswordCredentialProvider.html">
                <code>PasswordCredentialProvider</code></a> and 
                <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/spi/InternalPasswordCredentialInterceptor.html">
                <code>InternalPasswordCredentialInterceptor</code></a> components custom logic can be plugged in for:</p>
            <ul>
                <li>providing a custom 
                    <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/PasswordCredential.html">
                    <code>PasswordCredential</code></a> implementation</li>
                <li>password encoding<br/>
                    If an 
                    <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/spi/CredentialPasswordEncoder.html">
                    <code>CredentialPasswordEncoder</code></a> is available from the 
                    <code>PasswordCredentialProvider</code> passwords will be encoded with it before they are persisted.
                    The provided 
                    <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/MessageDigestCredentialPasswordEncoder.html">
                    <code>MessageDigestCredentialPasswordEncoder</code></a> uses 
                    <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/MessageDigest.html">
                    <code>MessageDigest</code></a> hash algorithms for the password encryption, and can for example be
                    configured to use <code>SHA-1</code> and <code>Base64</code>.
                </li>
                <li>enforcing password value rules<br/>
                    If an
                    <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/spi/CredentialPasswordValidator.html">
                    <code>CredentialPasswordValidator</code></a> is available from the
                    <code>PasswordCredentialProvider</code>, passwords will be validated with it before they are persisted.
                    The 
                    <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/DefaultCredentialPasswordValidator.html">
                    <code>DefaultCredentialPasswordValidator</code></a> for example enforces non-emtpy password. And
                    with the 
                    <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/SimpleCredentialPasswordValidator.html">
                    <code>SimpleCredentialPasswordValidator</code></a> a minimum length and a minum number of numeric
                    characters can be enforced.
                </li>
                <li>intercepting 
                    <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/om/InternalCredential.html">
                    <code>InternalCredential</code></a> lifecycle events<br/>
                    If the <code>DefaultCredentialHandler</code> is provided with an
                    <code>InternalPasswordCredentialInterceptor</code>, it will invoke this interceptor (or an arbirary
                    set if
                    <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/InternalPasswordCredentialInterceptorsProxy.html">
                    <code>InternalPasswordCredentialInterceptorsProxy</code></a> is used) on:
                    <ul>
                      <li>after loading a credential from the persistent store</li>
                      <li>after authenticating a user</li>
                      <li>before a new credential is saved to the persistent store</li>
                      <li>before a new password is save for the credential</li>                      
                    </ul>
                    Jetspeed already provides a basic set of interceptors, ready to be used:
                    <ul>
                      <li>
                          <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/ValidatePasswordOnLoadInterceptor.html">
                          <code>ValidatePasswordOnLoadInterceptor</code></a><br/>
                          This interceptor can be used to validate (pre)set passwords in the persistent store and force
                          a required change by the user if invalid. It uses the configured <code>CredentialPasswordValidator</code>
                          of the <code>PasswordCredentialProvider</code>, the same as used when a password is changed.
                      </li>
                      <li>
                          <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/EncodePasswordOnFirstLoadInterceptor.html">
                          <code>EncodePasswordOnFirstLoadInterceptor</code></a><br/>
                          This interceptor can be used if passwords needs to be preset in the persistent store or
                          migrated unencoded from a different store. With this interceptor, these cleartext password
                          will automatically be encoded the first time they are loaded from the database, using the 
                          <code>CredentialPasswordEncoder</code> from the <code>PasswordCredentialProvider</code>
                      </li>
                      <li>
                          <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/PasswordExpirationInterceptor.html">
                          <code>PasswordExpirationInterceptor</code></a><br/>
                          This interceptor can be used to enforce a maximum lifespan for passwords.
                          It manages the <code>expiration_date</code> and <code>is_expired</code> members of the
                          <code>InternalCredential</code> and sets the expired flag when on authentication of a user
                          its (valid) password is expired. The authentication will then fail.<br/>
                          Note: A Jetspeed pipeline Valve, the <code>PasswordCredentialValveImpl</code> can be
                          used to request or even enforce users to change their password in time to prevent a password
                          expiration (described further below). 
                      </li>
                      <li>
                          <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/MaxPasswordAuthenticationFailuresInterceptor.html">
                          <code>MaxPasswordAuthenticationFailuresInterceptor</code></a><br/>
                          This interceptor can be used to prevent password hacking by enforcing a maximum number of
                          invalid password attempts in a row. Once this number of authentication failures is reached,
                          the credential will be disabled. On a successful authentication though, this count
                          will automatically be reset to zero again by the <code>DefaultCredentialHandler</code>.
                      </li>                          
                      <li>
                          <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/PasswordHistoryInterceptor.html">
                          <code>PasswordHistoryInterceptor</code></a><br/>
                          This interceptor can be used to enforce usage of unique new passwords in respect to a certain
                          number of previous used passwords. When a new password is set, the current password is saved
                          in a FIFO stack of used passwords. When a user itself changes its password, it must be different
                          from all the onces thus saved, otherwise a 
                          <a href="../multiproject/jetspeed-api/apidocs/org/apache/jetspeed/security/PasswordAlreadyUsedException.html">
                          <code>PasswordAlreadyUsedException</code></a> will be
                          thrown. But setting a new password through the administrative interface still allows any
                          password (when otherwise valid) to be set.
                      </li>
                    </ul>
                    <p>
                    The <code>DefaultCredentialHandler</code> only supports one interceptor to be configured.
                    But, with the 
                        <a href="../multiproject/jetspeed-security/apidocs/org/apache/jetspeed/security/spi/impl/InternalPasswordCredentialInterceptorsProxy.html">
                    <code>InternalPasswordCredentialInterceptorsProxy</code></a>, a list of interceptors can
                    be configured which then will be invoked sequentially.</p>
                    <p>
                    Jetspeed comes out of the box with several of these interceptors configured, and its very easy to
                    change and extend.See the <a href="../deployguide/security-config.html#security-spi-atn_xml">security-spi-atn.xml</a>
                    section in the <a href="../deployguide/security-config.html">Security Services Configuration</a> document for a description
                    of the default configuration. Also provided there is an example how to setup the interceptors to 
                    restore the "old" (and much more restrict) configuration provided with the 2.0-M3 release and
                    earlier.</p>
                </li>
            </ul>
          </subsection>
          <subsection name="Credentials Management Implementation">
            <p>
                The class diagram below describes the components used for the
                <code>DefaultCredentialHandler</code>
                implementation.
            </p>
            <p align="center">
                <img src="images/credential-handler-c.gif" border="0" />
            </p>
            <p>
                The OJB mappings for the default credentials implementation are described in 
                <code>security_repository.xml</code>:
                <ul>
                    <li><code>InternalCredential</code>: Maps to the SECURITY_CREDENTIAL table.</li>
                </ul>
                The following database schema is used to stored credentials and their associations to principals.
            </p>
            <p align="center">
                <img src="images/principals-credentials-schema.gif" border="0" />
            </p>
          </subsection>
        </section>
    </body>
</document>
